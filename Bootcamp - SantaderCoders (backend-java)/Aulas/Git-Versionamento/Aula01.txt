1. Registro de mudanças em arquivos, que possibilita recuperação ou acesso a versões anteriores.

2. Desenvolvimento de código em colaboração com outros integrantes.

--> Git <--
É um sistema de versionamento de código, que guarda os registro de versão como >SNAPSHOTS< (fotos) do estado do projeto, além da referência/caminho para essa foto.

A maioria das operações feitas pelo Git são locais e por isso boa parte das operações são praticamente instantâneas devido à facilidade de acessar arquivos em seu próprio computador.

-->> Comandos do Terminal <<--
 
1. Git Clone -> Faz download de um repositório online.
2. Git Init -> Inicia repositório git de versionamento.
3. Git Status -> Verifica o status dos arquivos da pasta.
4. Git Add -> "Prepara" (staged) a alteração feita no arquivo para commitar
5. Git Diff -> Mostra as linhas modificadas do arquivo.
5². Git Diff --staged -> mostra as linhas modificadas dos arquivos já preparados(stageds)
6. Git Commit -m "título do commit" -> Dar commit na pasta
7. Git Push -> Enviar os commits para o repositório online.
8. Git Pull -> Sincronizar o código com o repositório remoto.
9. Git Fetch -> Sicroniza o código mas sem inserir (use Git Diff pra ver a diferença do codigo da origem e o da branch)
10. Git Log -> Historico dos ultimos commits feitos com a data, hash, autor, branch e etc.
11. Git Restore -> Remove a modificação feita e retorna o arquivo ao ultimo commit (ou save).
11. Git Restore --staged -> Retorna o arquivo para antes da forma "staged" e volta para modo "modificado".
12. Git Branch -> Verifica as ramificações existentes.
13. Git Branch "nome" -> Cria nova ramificação. 
14. Git Checkout "nome" -> Muda a ramificação atual.
15. Git merge "nome" -> Dá merge (junta) as ramificações; puxa a alteração do outro pra branch atual.
